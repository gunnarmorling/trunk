{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trunk","text":""},{"location":"#trunk","title":"Trunk","text":"<p>Trunk is an open source package manager and registry for PostgreSQL (Postgres) extensions:</p> <ul> <li>Visit pgt.dev to discover and learn more about the building blocks of this rich ecosystem </li> <li>Use the Trunk CLI (pg-trunk) to build, publish and install Postgres extensions of all kinds.</li> </ul> <p></p>"},{"location":"#trunk-cli","title":"Trunk CLI","text":""},{"location":"#installation","title":"Installation","text":"<p>To get started, run the following commands to download and leverage cargo to install Trunk's CLI. 1. <code>curl https://sh.rustup.rs -sSf | sh</code> 2. <code>cargo install pg-trunk</code></p>"},{"location":"#usage","title":"Usage","text":"<p>The Trunk CLI allows for building, publishing and installing Postgres extensions of all kinds. It abstracts away complexities of extension development and management with the following commands:</p>"},{"location":"#trunk-build","title":"<code>trunk build</code>","text":"<p>Compile extensions of all kinds.</p> <pre><code>\u276f trunk build\nBuilding from path .\nDetected that we are building a pgrx extension\nDetected pgrx version range 0.7.4\nUsing pgrx version 0.7.4\nBuilding pgrx extension at path .\n.\n.\n.\nCreating package at: ./.trunk/pgmq-0.5.0.tar.gz\nCreate Trunk bundle:\n    pgmq.so\n    extension/pgmq--0.5.0.sql\n    extension/pgmq.control\n    manifest.json\nPackaged to ./.trunk/pgmq-0.5.0.tar.gz\n</code></pre>"},{"location":"#trunk-publish","title":"<code>trunk publish</code>","text":"<p>Publish extensions to the registry, making them available to the Postgres community for discovery and installation.</p> <pre><code>\u276f trunk publish pgmq \\\n--version 0.5.0 \\\n--description \"Message Queue for postgres\" \\\n--documentation \"https://github.com/tembo-io/pgmq\" \\\n--repository \"https://github.com/tembo-io/pgmq\" \\\n--license \"Apache-2.0\" \\\n--homepage \"https://www.tembo.io\"\n</code></pre>"},{"location":"#trunk-install","title":"<code>trunk install</code>","text":"<p>Downloads Postgres extensions from the Trunk registry and installs into your environment (only Ubuntu suppot at this time).</p> <p>Supports nested dependencies, e.g. installing <code>extension_a</code> will automatically install <code>extension_b</code> if required.</p> <pre><code>\u276f trunk install pgmq\nUsing pg_config: /usr/bin/pg_config\nUsing pkglibdir: \"/usr/lib/postgresql/15/lib\"\nUsing sharedir: \"/usr/share/postgresql/15\"\nDownloading from: https://cdb-plat-use1-prod-pgtrunkio.s3.amazonaws.com/extensions/pgmq/pgmq-0.5.0.tar.gz\nDependencies: [\"pg_partman\"]\nInstalling pgmq 0.5.0\n[+] pgmq.so =&gt; /usr/lib/postgresql/15/lib\n[+] extension/pgmq--0.5.0.sql =&gt; /usr/share/postgresql/15\n[+] extension/pgmq.control =&gt; /usr/share/postgresql/15\n</code></pre>"},{"location":"#trunk-registry-httpspgtdev","title":"Trunk Registry - https://pgt.dev","text":"<p>The Trunk registry serves as a community hub for Postgres extensions of all kinds. The Trunk CLI installs extensions and their dependencies as compiled artifacts from this registry.</p> <ul> <li>Extension discovery and search</li> <li>Publish extensions for community use</li> <li>Install extensions in Postgres</li> </ul> <p>It's our goal to develop Trunk to allow for:</p> <ul> <li>Usage metrics to provide insight into popular and well-maintained extensions</li> <li>Version tracking and new release email notifications</li> </ul>"},{"location":"#contributing","title":"\u2728 Contributing","text":"<p>Trunk is in active development, and we look forward to the contributions the Postgres community has to offer. If you're interested in contributing, please open a pull request, issue, or reach out!</p> <ul> <li>Slack</li> <li>Twitter</li> <li>Email us at hello@tembo.io</li> </ul> <p>Thanks goes to these incredible people:</p> <p> </p>"},{"location":"cli/cli/","title":"Trunk CLI","text":"<p>The Trunk CLI allows for building, publishing and installing Postgres extensions of all kinds. It abstracts away complexities of extension development and management with the following commands:</p> <ul> <li><code>trunk build</code> - Compiles extensions into publishable and installable artifacts.</li> <li><code>trunk publish</code> - Publishes extensions to the Trunk registry, making them available to the Postgres community for discovery and installation.</li> <li><code>trunk install</code> - Downloads Postgres extensions from the Trunk registry and installs in whichever environment trunk is run.</li> </ul>"},{"location":"cli/cli/#installation","title":"Installation","text":"<p>The Trunk CLI is hosted at crates.io and can be installed with <code>cargo</code>.</p> <ol> <li><code>curl https://sh.rustup.rs -sSf | sh</code></li> <li> <p><code>cargo install pg-trunk</code></p> </li> <li> <p>To check you're version of Trunk, invoke <code>trunk --version</code>.</p> </li> <li>To upgrade to the latest version of Trunk, run <code>cargo install pg-trunk</code>.</li> </ol>"},{"location":"cli/cli/#trunk-build","title":"<code>trunk build</code>","text":"<p>The <code>build</code> command allows for compiling and packaging Postgres extensions from source. Packaged extensions are written to <code>.trunk/&lt;extension-name&gt;-&lt;extension-version&gt;.tar.gz</code>.</p> <pre><code>\u276f trunk build --help\nUsage: trunk build [OPTIONS]\n\nOptions:\n  -p, --path &lt;PATH&gt;                        [default: .]\n-o, --output-path &lt;OUTPUT_PATH&gt;          [default: ./.trunk]\n--version &lt;VERSION&gt;\n      --name &lt;NAME&gt;\n      --platform &lt;PLATFORM&gt;\n      --dockerfile &lt;DOCKERFILE_PATH&gt;\n      --install-command &lt;INSTALL_COMMAND&gt;\n  -h, --help                               Print help\n</code></pre>"},{"location":"cli/cli/#pgrx-based-extensions","title":"PGRX Based Extensions","text":"<p>Extensions can be built in many ways, and PGRX allows for us to do so with Rust. Trunk makes building and packaging PGRX based extensions easier than ever.</p> <p>Example <code>trunk build</code> with PGRX based extension pgmq:</p> <pre><code>\u276f trunk build\nBuilding from path .\nDetected that we are building a pgrx extension\nDetected pgrx version range 0.7.4\nUsing pgrx version 0.7.4\nBuilding pgrx extension at path .\n.\n.\n.\nCreating package at: ./.trunk/pgmq-0.5.0.tar.gz\nCreate Trunk bundle:\n    pgmq.so\n    extension/pgmq--0.5.0.sql\n    extension/pgmq.control\n    manifest.json\nPackaged to ./.trunk/pgmq-0.5.0.tar.gz\n</code></pre>"},{"location":"cli/cli/#c-sql-based-extensions","title":"C &amp; SQL Based Extensions","text":"<p>Extensions can also be written in C &amp; SQL. Let's take a look at how we can build C &amp; SQL based extensions with Trunk.</p>"},{"location":"cli/cli/#example-trunk-build-with-c-sql-based-extension-pg_cron","title":"Example <code>trunk build</code> with C &amp; SQL based extension pg_cron","text":"<pre><code>\u276f trunk build --name pg_cron --version 1.5.2\nBuilding from path .\nDetected a Makefile, guessing that we are building an extension with 'make', 'make install...'\nUsing install command make install\nBuilding with name pg_cron\nBuilding with version 1.5.2\n.\n.\n.\nCreating package at: ./.trunk/pg_cron-1.5.2.tar.gz\nCreate Trunk bundle:\n    bitcode/pg_cron/src/entry.bc\n    bitcode/pg_cron/src/job_metadata.bc\n    bitcode/pg_cron/src/misc.bc\n    bitcode/pg_cron/src/pg_cron.bc\n    bitcode/pg_cron/src/task_states.bc\n    bitcode/pg_cron.index.bc\n    pg_cron.so\n    extension/pg_cron--1.0--1.1.sql\n    extension/pg_cron--1.0.sql\n    extension/pg_cron--1.1--1.2.sql\n    extension/pg_cron--1.2--1.3.sql\n    extension/pg_cron--1.3--1.4.sql\n    extension/pg_cron--1.4--1.4-1.sql\n    extension/pg_cron--1.4-1--1.5.sql\n    extension/pg_cron.control\n    manifest.json\nPackaged to ./.trunk/pg_cron-1.5.2.tar.gz\n</code></pre> <p>Some extensions are part of larger projects and include Makefiles with references to parent directories. Examples of such extensions include those found in postgres/contrib. Trunk can help us build and package these types of extensions as well.</p>"},{"location":"cli/cli/#example-trunk-build-with-c-sql-based-extension-pg_stat_statements","title":"Example <code>trunk build</code> with C &amp; SQL based extension pg_stat_statements","text":"<p>Create a custom Dockerfile named <code>Dockerfile.pg_stat_statements</code> at the root of the postgres/contrib repository:</p> <pre><code>ARG PG_VERSION=15\nFROM quay.io/coredb/c-builder:pg${PG_VERSION}\nUSER root\n\n# Postgres build dependencies. Additional system dependencies for the extension can be added here.\n# https://wiki.postgresql.org/wiki/Compile_and_Install_from_source_code\nRUN apt-get update &amp;&amp; apt-get install -y  build-essential libreadline-dev zlib1g-dev flex bison libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache\n\n# Copy working directory into container\nCOPY --chown=postgres:postgres . .\n# Necessary step for building extensions in postgres/contrib\nRUN ./configure\n# Run make in the pg_stat_statements directory\nRUN cd contrib/pg_stat_statements &amp;&amp; make\n</code></pre> <p>Run <code>trunk build</code> with <code>--dockerfile</code> and <code>--install-command</code> flags:</p> <pre><code>\u276f trunk build \\\n--name pg_stat_statements \\\n--version 1.10.0 \\\n--dockerfile Dockerfile.pg_stat_statements \\\n--install-command \\\n\"cd contrib/pg_stat_statements \\\n&amp;&amp; make install \\\n&amp;&amp; set -x \\\n&amp;&amp; mv /usr/local/pgsql/share/extension/* /usr/share/postgresql/15/extension \\\n&amp;&amp; mv /usr/local/pgsql/lib/* /usr/lib/postgresql/15/lib\"\nBuilding from path .\nDetected a Makefile, guessing that we are building an extension with 'make', 'make install...'\nUsing Dockerfile at Dockerfile.pg_stat_statements\nUsing install command /bin/sh -c cd contrib/pg_stat_statements &amp;&amp; make install &amp;&amp; set -x &amp;&amp; mv /usr/local/pgsql/share/extension/* /usr/share/postgresql/15/extension &amp;&amp; mv /usr/local/pgsql/lib/* /usr/lib/postgresql/15/lib\nBuilding with name pg_stat_statements\nBuilding with version 1.10.0\n.\n.\n.\nCreating package at: ./.trunk/pg_stat_statements-1.10.0.tar.gz\nCreate Trunk bundle:\npg_stat_statements.so\nextension/pg_stat_statements--1.0--1.1.sql\nextension/pg_stat_statements--1.1--1.2.sql\nextension/pg_stat_statements--1.2--1.3.sql\nextension/pg_stat_statements--1.3--1.4.sql\nextension/pg_stat_statements--1.4--1.5.sql\nextension/pg_stat_statements--1.4.sql\nextension/pg_stat_statements--1.5--1.6.sql\nextension/pg_stat_statements--1.6--1.7.sql\nextension/pg_stat_statements--1.7--1.8.sql\nextension/pg_stat_statements--1.8--1.9.sql\nextension/pg_stat_statements--1.9--1.10.sql\nextension/pg_stat_statements.control\nmanifest.json\nPackaged to ./.trunk/pg_stat_statements-1.10.0.tar.gz\n</code></pre>"},{"location":"cli/cli/#trunk-publish","title":"<code>trunk publish</code>","text":"<p>The <code>publish</code> command allows you to publish your newly-minted Postgres extension to the Trunk registry.</p> <pre><code>\u276f trunk publish --help\nUsage: trunk publish [OPTIONS] --version &lt;VERSION&gt; &lt;NAME&gt;\n\nArguments:\n  &lt;NAME&gt;\n\nOptions:\n  -v, --version &lt;VERSION&gt;\n  -f, --file &lt;FILE&gt;\n  -d, --description &lt;DESCRIPTION&gt;\n  -D, --documentation &lt;DOCUMENTATION&gt;\n  -H, --homepage &lt;HOMEPAGE&gt;\n  -l, --license &lt;LICENSE&gt;\n  -r, --registry &lt;REGISTRY&gt;            [default: https://registry.pgtrunk.io]\n-R, --repository &lt;REPOSITORY&gt;\n  -h, --help                           Print help\n</code></pre> <ol> <li> <p>Sign in at the Trunk registry and click <code>Profile</code>.</p> </li> <li> <p>Under <code>API Token</code>, click <code>Create New Token</code>.</p> </li> <li> <p><code>export TRUNK_API_TOKEN=&lt;your-new-token&gt;</code></p> </li> <li> <p>Run the following from the same directory your extension is in:</p> </li> </ol> <pre><code>\u276f trunk publish pgmq \\\n--version 0.5.0 \\\n--description \"Message Queue for postgres\" \\\n--documentation \"https://tembo-io.github.io/coredb/extensions/pgmq\" \\\n--repository \"https://github.com/tembo-io/coredb\" \\\n--license \"Apache-2.0\" \\\n--homepage \"https://www.coredb.io\"\n</code></pre>"},{"location":"cli/cli/#trunk-install","title":"<code>trunk install</code>","text":"<p>The <code>install</code> command allows you to install Postgres extensions from the Trunk registry. Trunk will automatically install any additional extension dependencies that exist in the registry.</p> <pre><code>\u276f trunk install --help\nUsage: trunk install [OPTIONS] &lt;NAME&gt;\n\nArguments:\n  &lt;NAME&gt;\n\nOptions:\n  -p, --pg-config &lt;PG_CONFIG&gt;\n  -f, --file &lt;FILE&gt;\n  -v, --version &lt;VERSION&gt;      [default: latest]\n-r, --registry &lt;REGISTRY&gt;    [default: https://registry.pgtrunk.io]\n-h, --help                   Print help\n</code></pre> <pre><code>\u276f trunk install pgmq\nUsing pg_config: /usr/bin/pg_config\nUsing pkglibdir: \"/usr/lib/postgresql/15/lib\"\nUsing sharedir: \"/usr/share/postgresql/15\"\nDownloading from: https://cdb-plat-use1-prod-pgtrunkio.s3.amazonaws.com/extensions/pgmq/pgmq-0.5.0.tar.gz\nDependencies: [\"pg_partman\"]\nInstalling pgmq 0.5.0\n[+] pgmq.so =&gt; /usr/lib/postgresql/15/lib\n[+] extension/pgmq--0.5.0.sql =&gt; /usr/share/postgresql/15\n[+] extension/pgmq.control =&gt; /usr/share/postgresql/15\n</code></pre>"},{"location":"cli/cli_cmnds_build/","title":"Build","text":"<p>The <code>build</code> command allows for compiling and packaging Postgres extensions from source. Packaged extensions are written to .trunk/-.tar.gz."},{"location":"cli/cli_cmnds_build/#options","title":"Options","text":""},{"location":"cli/cli_cmnds_build/#-p-path","title":"-p, --path","text":"<p>Define a path that the Trunk CLI will use to search for relevant files.</p> <ul> <li>Default Behavior: If this option is not specified, the Trunk CLI operates in the directory where the build command is invoked.</li> </ul>"},{"location":"cli/cli_cmnds_build/#-o-output-path","title":"-o, --output-path","text":"<p>Sets the directory where the product is written to.</p> <ul> <li>Default Behavior: If this option is not specified, a new directory named .trunk is created in the current directory, resulting in ./.trunk.</li> </ul>"},{"location":"cli/cli_cmnds_build/#-v-version","title":"-v, --version","text":"<p>Use this option to specify the version of the extension. The version is usually associated with the highest value found in a SQL file. Trunk abides by semantic versioning standards. For more information, please refer to the [SOURCE LINK HERE].</p> <ul> <li>Default Behavior: It is required to include the extension version. Failing to do so will cause an error.</li> </ul>"},{"location":"cli/cli_cmnds_build/#-n-name","title":"-n, --name","text":"<p>This option allows you to define the name of your extension. While you have creative freedom, a good naming convention<code>pg_</code>.</p> <ul> <li>Default Behavior: Similar to --version, it is necessary to attribute a name to the extension you would like to build.</li> </ul>"},{"location":"cli/cli_cmnds_build/#-p-platform","title":"-P, --platform","text":"<p>This option enables you to specify the target architecture that will be used when building the extension. This allows you to ensure compatibility of your extension with the desired systems. The current options are as follows:</p> <ul> <li>linux/amd64</li> <li>arm</li> </ul>"},{"location":"cli/cli_cmnds_build/#-d-dockerfile","title":"-d, --dockerfile","text":"<ul> <li>Updates to come.</li> <li>Default Behavior: If this option is not specified and a Makefile is detected, the default Dockerfile at ./builders/Dockerfile.generic is used. If a Cargo.toml file is detected, the Dockerfile is not required.</li> </ul>"},{"location":"cli/cli_cmnds_build/#-i-install-command","title":"-i, --install-command","text":"<p>This option is used to specify the command that will be used to install the extension during the build process. In the context of this build script, if a Cargo.toml file is detected, the script assumes that it's building a pgrx extension and handles the build process internally. In other words, it does not require an install command. However, if a Makefile is detected, the script presumes that it is building an extension with make and make install. In this scenario, the --install-command becomes essential.</p> <ul> <li>Default Behavior: If this option is not specified, the default install command make install is used.</li> <li>Note: The --install-command is only used when building with a Makefile. The --version and --name options are mandatory in this case.</li> </ul>"},{"location":"cli/cli_cmnds_build/#-h-help","title":"--h, --help","text":"<p>This option displays a help message summarizing the usage of the command-line options.</p>"},{"location":"cli/cli_cmnds_build/#example","title":"Example","text":""},{"location":"cli/cli_cmnds_build/#pgrx-based-extensions","title":"PGRX Based Extensions","text":"<p>Extensions can be built in many ways, and PGRX allows for us to do so with Rust. Trunk makes building and packaging PGRX based extensions easier than ever.</p> <p>Example <code>trunk build</code> with PGRX based extension pgmq:</p> <pre><code>\u276f trunk build\nBuilding from path .\nDetected that we are building a pgrx extension\nDetected pgrx version range 0.7.4\nUsing pgrx version 0.7.4\nBuilding pgrx extension at path .\n.\n.\n.\nCreating package at: ./.trunk/pgmq-0.5.0.tar.gz\nCreate Trunk bundle:\n    pgmq.so\n    extension/pgmq--0.5.0.sql\n    extension/pgmq.control\n    manifest.json\nPackaged to ./.trunk/pgmq-0.5.0.tar.gz\n</code></pre>"},{"location":"registry/registry/","title":"Trunk Registry - https://pgtrunk.io","text":"<p>The Trunk registry serves as the community's hub for Postgres extensions of all kinds. It stores extension information in its database and compiled extension artifacts in AWS S3. Features include:</p> <ul> <li>Extension discovery and search</li> <li>Publish extensions for community use</li> <li>Install extensions in Postgres</li> <li>Usage metrics to provide insight into popular and well-maintained extensions</li> <li>Version tracking and new release email notifications</li> </ul>"},{"location":"registry/registry/#usage","title":"Usage","text":""},{"location":"registry/registry/#extension-categories","title":"Extension Categories","text":"<p>Extensions are grouped according to developer-centric use cases:</p> <p><code>Analytics</code> - Interrogate data to extract meaningful insights.</p> <p><code>Auditing / Logging</code> - Monitor and record database activities.</p> <p><code>Change Data Capture</code> - Track and apply database changes to targeted objects or processes.</p> <p><code>Connectors</code> - Integrate and interact with external data sources, systems, and services.</p> <p><code>Data / Transformations</code> - Streamline data loading, transformation processes, and basic data type management.</p> <p><code>Debugging</code> - Identify and resolve issues.</p> <p><code>Index / Table Optimizations</code> - Improve performance by targeting index use and creation, as well as database compaction and reorganization.</p> <p><code>Machine Learning</code> - Incorporate machine learning capabilities.</p> <p><code>Metrics</code> - Spotlight performance indicators, such as cache and tuple-level statistics, process information,  session-level activity, and more.</p> <p><code>Monitoring</code> - Offer real-time or near-real-time database activity and performance.</p> <p><code>Orchestration</code> - Establish ongoing database management related, but not limited to operations, deployment, or clusters.</p> <p><code>Procedural Languages</code> - Enable efficient management, manipulation, and adaptation of database logic.</p> <p><code>Query Optimizations</code> - Augment query experiences surrounding metrics observability and usability.</p> <p><code>Search</code> - Facilitate more efficient search operations within a database.</p> <p><code>Security</code> - Employ defense strategies for data and databases, including encryption, measures to prevent unauthorized access, and with other associated safeguarding tactics.</p> <p><code>Tooling / Admin</code> - Extend user management and database system oversight, as well as \u201cunder-the-hood\u201d access to logic modification and external resources.</p>"},{"location":"registry/registry/#development","title":"Development","text":""},{"location":"registry/registry/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Start postgres database     <code>docker run -it --rm -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres:latest</code></p> </li> <li> <p>Set connection string environment variable. This can also be configured in <code>.env</code>.     <code>export DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/postgres\"</code></p> </li> <li> <p>Initialize database (must install sqlx)     <code>cargo sqlx migrate run</code></p> </li> <li> <p>Run, with automatic reloads (uses cargo watch)     <code>cargo watch -x run</code></p> </li> </ol>"},{"location":"registry/registry/#usage_1","title":"Usage","text":"<p>The registry will run at <code>http://localhost:8080</code> by default. The Trunk CLI can be configured to interact with a local registry by using the <code>--registry</code> flag. Example:</p> <pre><code>trunk publish pgmq \\\n--version 0.5.0 \\\n--description \"Message queue for Postgres\" \\\n--documentation \"https://github.com/tembo-io/coredb/tree/main/pgmq/extension\" \\\n--repository \"https://github.com/tembo-io/coredb/tree/main/pgmq/extension\" \\\n--license \"Apache-2.0\" \\\n--homepage \"https://github.com/tembo-io/coredb\" \\\n--registry http://localhost:8080\n</code></pre> <p>Routes can also be called with tools like <code>curl</code>. Examples:</p> <pre><code>curl --request GET --url 'http://localhost:8080/extensions/all'\n</code></pre> <pre><code>curl --request GET --url 'http://localhost:8080/extensions/pgmq/0.5.0/download'\n</code></pre> <pre><code>curl --request POST -H \"Authorization: Bearer ${TOKEN}\" --url 'http://localhost:8080/token/new'\n</code></pre> <pre><code>curl -F metadata='{\\\n\"name\": \"pgmq\", \\\n\"vers\": \"0.5.0\", \\\n\"description\": \"Message queue for Postgres\", \\\n\"documentation\": \"https://github.com/tembo-io/coredb/tree/main/pgmq/extension\", \\\n\"repository\": \"https://github.com/tembo-io/coredb/tree/main/pgmq/extension\", \\\n\"license\": \"Apache-2.0\", \\\n\"homepage\": \"https://coredb.io\"}' \\\n-F file=@./pgmq-0.5.0.tar.gz --url 'http://localhost:8080/extensions/new'\n</code></pre>"},{"location":"registry/registry/#architecture","title":"Architecture","text":"<p>The Trunk registry is made up of the following components: - API - PostgreSQL database - AWS S3 bucket</p> <p></p>"},{"location":"ui/ui/","title":"UI","text":"<p>This is a Next.js project bootstrapped with <code>create-next-app</code>.</p>"},{"location":"ui/ui/#getting-started","title":"Getting Started","text":"<p>First, run the development server:</p> <pre><code>npm run dev\n# or\nyarn dev\n# or\npnpm dev\n</code></pre> <p>Open http://localhost:3000 with your browser to see the result.</p> <p>You can start editing the page by modifying <code>pages/index.tsx</code>. The page auto-updates as you edit the file.</p> <p>API routes can be accessed on http://localhost:3000/api/hello. This endpoint can be edited in <code>pages/api/hello.ts</code>.</p> <p>The <code>pages/api</code> directory is mapped to <code>/api/*</code>. Files in this directory are treated as API routes instead of React pages.</p> <p>This project uses <code>next/font</code> to automatically optimize and load Inter, a custom Google Font.</p>"},{"location":"ui/ui/#learn-more","title":"Learn More","text":"<p>To learn more about Next.js, take a look at the following resources:</p> <ul> <li>Next.js Documentation - learn about Next.js features and API.</li> <li>Learn Next.js - an interactive Next.js tutorial.</li> </ul> <p>You can check out the Next.js GitHub repository - your feedback and contributions are welcome!</p>"},{"location":"ui/ui/#deploy-on-vercel","title":"Deploy on Vercel","text":"<p>The easiest way to deploy your Next.js app is to use the Vercel Platform from the creators of Next.js.</p> <p>Check out our Next.js deployment documentation for more details.</p>"}]}